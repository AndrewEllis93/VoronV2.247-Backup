######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# PS/SS filament gcode will take precendence over this.
[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}
	# PETG
	{% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
		#SET_PRESSURE_ADVANCE ADVANCE=0
	{% endif %}
	# PLA
	{% if printer.heater_bed.target <= 65 %}
		#SET_PRESSURE_ADVANCE ADVANCE=0.05
	{% endif %}

######################### PRINT START / END #########################

[gcode_macro PRINT_START]
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:		
	# Parameters
	{% set BED = params.BED|int %}
	{% set HOTEND = params.HOTEND|int %}
	{% set CHAMBER = params.CHAMBER|default(0)|int %}
																							
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={BED}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={HOTEND}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={CHAMBER}	
	
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  													; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=Delayed_Off DURATION=0      												; cancel off timer (if there is one)
	RESETSPEEDS																							; reset speed, accel etc to configured values
	RESETRGB																							; reset LCD RGB
	M104 S140																							; set hotend to no-ooze temp
	M140 S{BED}																							; set bed to target temp
	CG28																								; conditional home
	{% if not printer["temperature_sensor chamber"].temperature >= CHAMBER %}		
		{ action_respond_info("Chamber not at temp yet, pausing...") }	
		HEATSOAK T={BED} MOVE=1																			; heatsoak and park
		M190 S{BED} 																					; wait for bed final temp
		M191 S{CHAMBER}																					; wait for chamber final temp, start PRINT_START2 when reached
	{% else %}
		{ action_respond_info("Chamber at or above temp.") }
		{% if printer.heater_bed.temperature < (BED - 2) %}
			HEATSOAK T={BED} MOVE=1																		; heatsoak and park
			M190 S{BED} 																				; wait for bed final temp
		{% else %}
			HEATSOAK T={BED} MOVE=0																		; heatsoak without parking
		{% endif %}
		PRINT_START2
	{% endif %}	
	
[gcode_macro PRINT_START2]
gcode:
	M106 S0																								; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																						; clear bed mesh
	ATTACH_PROBE_LOCK																					; attach klicky
	QUAD_GANTRY_LEVEL																					; quad gantry level
	G28 Z																								; home z
	G90 													 											; absolute positioning
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500					; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
	BED_MESH_CALIBRATE																					; mesh
	G28 Z																								; home z again
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	DOCK_PROBE_UNLOCK																					; stow probe, unlock
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500												; move to right of nozzle brush
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 											; set & wait for hotend final temp
	CLEANNOZZLE																							; clean nozzle while hot
	TEMPADJUSTPA																						; change PA based on bed temp
	CALIBRATE_Z																							; calibrate z offset with hot nozzle
	SWIPENOZZLE																							; swipe nozzle brush on way to print purge line
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1													; enable filament sensor
	SET_FAN_SPEED FAN=Exhaust SPEED=0.1																	; Set chamber fan to 10%
	G92 E0                              																; Reset Extruder
	G1 X0 Y20 Z0.3 F19500.0           																	; Move to start position
	G1 X0 Y200.0 Z0.3 F1500.0 E15     																	; Draw the first line
	G92 E0                              																; Reset Extruder
	G1 Z2.0 F3000                       																; Move Z Axis up
	
[gcode_macro PRINT_END]
gcode:
	RESETRGB
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; Disable filament sensor
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0    													; break chamber temp wait loop if it happens to be running
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
	{% if printer.heater_bed.temperature >= 100 %}												
		SET_FAN_SPEED FAN=Exhaust SPEED=1  																; turn on exhaust fan
	{% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                        	    																; zero the extruder
	#G10                              																	; retract filament
	G91                             							 										; relative positioning
    #TURN_OFF_HEATERS									
	M104 S0						 	    			 													; turn only the hotend off
	M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}												; return the bed to the specific temp, some slicers like to turn it off
    M107                         	   			 	 													; turn off fan
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
    #M117 Finished!               	     			 													; display message
	BED_MESH_CLEAR													
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=300 													; turn exhaust off in 5 min
	UPDATE_DELAYED_GCODE ID=Delayed_Off DURATION=1800	 												; turn off in 30 min
	BEEP I=3																							; beep 3 times

[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=Exhaust SPEED=0
	
[delayed_gcode Delayed_Off]
gcode:
	OFF
	
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	{% set i = params.I|default(3)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z0 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X85 F2400												; wipe back
		G0 X115	F2400												; wipe forth
	{% endfor %}
	G0 X115	F2400													; wipe back
	G0 Z10 F19500													; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z0	F19500													; lower
	G0 X85 F2400													; wipe back
	G0 Z10	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
	
	
######################### PAUSE/RESUME/CANCEL #########################

# Fluidd SD printing
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}														; z hop amount

	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    ; set z hop variable for reference in resume macro
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE																					; pause print
	G91																							; relative positioning
	G1 Z{z} F900																				; raise Z up by z hop amount
	G90																							; absolute positioning
	G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F19500   ; park toolhead at front center
	RESTORE_GCODE_STATE NAME=PAUSE
	SET_IDLE_TIMEOUT TIMEOUT=43200															    ; set timeout to 12 hours

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}																				; nozzle prime amount
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	SAVE_GCODE_STATE NAME=RESUME
	RESETRGB
	G91																													; relative positioning
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
		G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
	{% else %}						
		G1 Z{zhop * -1} F900																							; lower Z back down	without priming
	{% endif %}								
	RESTORE_GCODE_STATE NAME=RESUME						
	BASE_RESUME																											; resume print
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value

# Filament runout / change alias	
[gcode_macro M600]
gcode:
	PAUSE
	LCDRGB R=1 G=0 B=0	# Turn LCD red
	
# Disable filament senor on startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	
######################### CONFIG BACKUP #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: sh /home/pi/gitbackup.sh
timeout: 30.
verbose: True

######################### SAFETY #########################

[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35		; lower z stepper current (in case of crash)
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	

[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	
	
######################### FLUIDD WEB MACROS #########################

#[gcode_macro SETPA]
#gcode:
#	# Parameters
#	{% set PA = params.PA|default(0)|float %}
#
#	SET_PRESSURE_ADVANCE ADVANCE={PA}
#
#[gcode_macro SETPASMOOTH]
#gcode:
#	# Parameters
#	{% set SMOOTH = params.SMOOTH|default(0)|float %}
#	
#	SET_PRESSURE_ADVANCE SMOOTH_TIME={SMOOTH}

#[gcode_macro ZCALDOWN]
#gcode:
#	{% set mm = params.MM|default(-0.05)|float %}
#	
#	TESTZ Z={mm}
#
#[gcode_macro ZCALUP]
#gcode:
#	{% set mm = params.MM|default(0.05)|float %}
#	
#	TESTZ Z={mm}

######################### CHAMBER TEMP WAIT #########################

# Wait for chamber temp, kick off wait loop if not already at temp
[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}		   							; set target temp for reference outside of the macro (for the loop)
						
	{% if not printer["temperature_sensor chamber"].temperature >= s|float %}						; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		{ action_respond_info("Chamber not at temp yet, pausing...") }					
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   							; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   							; start wait loop
	{% else %}					
		{ action_respond_info("Chamber at or above temp, continuing...") }     							; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   							; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% if printer["temperature_sensor chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		{ action_respond_info("Chamber at or above temp, continuing...") }
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		{ action_respond_info("Chamber not at temp yet, waiting...") }
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   											 ; continue waiting loop
	{% endif %}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	M104 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S} 

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}  ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=Delayed_Off DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S128 									; turn on part fan (50%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

[gcode_macro BEEP]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	{% set beepms = params.BEEPMS|default(1)|int %}
	{% set waitms = params.WAITPMS|default(1)|int %}
	
    {% for beep in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8
        G4 P{beepms}
        SET_PIN PIN=beeper VALUE=0
		G4 P{waitms}
    {% endfor %}
	
######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
	RESETRGB
	
# Default RGB
[gcode_macro RESETRGB]
gcode:
	SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0 B=0
[gcode_macro LCDRGB]
gcode:
	{% set R = params.R|default(1)|int %}
	{% set G = params.G|default(1)|int %}
	{% set B = params.B|default(1)|int %}

	SET_LED LED=lcd RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
	SET_LED LED=lcd RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
	SET_LED LED=lcd RED={R} GREEN={G} BLUE={B} INDEX=3
	
######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E85 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}
	
######################### PARKING #########################

[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/2} F19500		; park front center, center Z
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z20 F19500										; park front center, 50mm up
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		; park top rear left
	RESTORE_GCODE_STATE NAME=PARKREAR
	
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	; park center of build volume
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										; park above center of bed
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Marlin linear advance
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}
  
[gcode_macro ZDOWN]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro ZUP]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro OFF]
gcode:
	M84												 ; turn steppers off
    TURN_OFF_HEATERS								 ; turn bed / hotend off
    M107                         	   			 	 ; turn print cooling fan off
	SET_FAN_SPEED FAN=Exhaust SPEED=0  				 ; turn exhaust fan off
	SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	SET_PIN PIN=caselight VALUE=0						; turn light off
	
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros
[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z
[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,300),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,315),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE

# Home, get position, throw around toolhead, home again.
# If XY steps are greater than XY microsteps different (a full step - usually just endstop variance), then we likely skipped.	
[gcode_macro SPEEDTEST]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=SPEEDTEST
	G28 X Y
    GET_POSITION
	G90                              ; absolute positioning
	{% for iteration in range(i|int) %}
        G1 X0 Y10 F99999
        G1 X340 Y340 F99999
        G1 X0 Y10 F99999
        G1 X340 Y340 F99999

        G1 X0 Y340 F99999

        G1 X340 Y10 F99999
        G1 X0 Y340 F99999
        G1 X340 Y10 F99999
        G1 X0 Y340 F99999

        G1 X0 Y10 F99999
        G1 X340 Y10 F99999
        G1 X340 Y340 F99999
        G1 X0 Y340 F99999
        G1 X0 Y10 F99999
	{% endfor %}
	G28 X Y
	GET_POSITION
	RESTORE_GCODE_STATE NAME=SPEEDTEST

# Just for throwing around the toolhead.
[gcode_macro SPEED]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=SPEEDTEST
	G90                              ; absolute positioning
	{% for iteration in range(i|int) %}
        G1 X0 Y10 F99999
        G1 X340 Y340 F99999
        G1 X0 Y10 F99999
        G1 X340 Y340 F99999

        G1 X0 Y340 F99999

        G1 X340 Y10 F99999
        G1 X0 Y340 F99999
        G1 X340 Y10 F99999
        G1 X0 Y340 F99999

        G1 X0 Y10 F99999
        G1 X340 Y10 F99999
        G1 X340 Y340 F99999
        G1 X0 Y340 F99999
        G1 X0 Y10 F99999
	{% endfor %}
	RESTORE_GCODE_STATE NAME=SPEEDTEST